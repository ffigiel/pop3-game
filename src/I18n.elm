module I18n exposing (I18n, Language(..), beatenHighScore, congratulations, gameHighScore, gameOver, gameScore, init, languageFromString, languageToString, languages, load, newHighScore, playAgainBtn, thanksForPlaying, viewSource)

{-| This file was generated by travelm-agency version 2.8.4.

If you have any issues with the generated code, do not hesitate to open an issue here: <https://github.com/andreasewering/travelm-agency/issues>

-}

import List
import Maybe
import String


{-| Initialize an i18n instance based on a language
-}
init : Language -> I18n
init lang =
    case lang of
        En ->
            en

        Pl ->
            pl


{-| Switch to another i18n instance based on a language
-}
load : Language -> I18n -> I18n
load lang _ =
    init lang


type alias I18n =
    { beatenHighScore_ : String
    , congratulations_ : String
    , gameHighScore_ : String -> String
    , gameOver_ : String
    , gameScore_ : String -> String
    , newHighScore_ : String -> String
    , playAgainBtn_ : String
    , thanksForPlaying_ : String
    , viewSource_ : String
    }


beatenHighScore : I18n -> String
beatenHighScore i18n =
    i18n.beatenHighScore_


congratulations : I18n -> String
congratulations i18n =
    i18n.congratulations_


gameHighScore : I18n -> String -> String
gameHighScore i18n =
    i18n.gameHighScore_


gameOver : I18n -> String
gameOver i18n =
    i18n.gameOver_


gameScore : I18n -> String -> String
gameScore i18n =
    i18n.gameScore_


newHighScore : I18n -> String -> String
newHighScore i18n =
    i18n.newHighScore_


playAgainBtn : I18n -> String
playAgainBtn i18n =
    i18n.playAgainBtn_


thanksForPlaying : I18n -> String
thanksForPlaying i18n =
    i18n.thanksForPlaying_


viewSource : I18n -> String
viewSource i18n =
    i18n.viewSource_


{-| `I18n` instance containing all values for the language En
-}
en : I18n
en =
    { beatenHighScore_ = "You beat my high score."
    , congratulations_ = "Congratulations!"
    , gameHighScore_ = \score -> "High score: " ++ score
    , gameOver_ = "Game over"
    , gameScore_ = \score -> "Score: " ++ score
    , newHighScore_ = \score -> "New high score! " ++ score
    , playAgainBtn_ = "Play again?"
    , thanksForPlaying_ = "Thanks for playing!"
    , viewSource_ = "View source code ↗"
    }


{-| `I18n` instance containing all values for the language Pl
-}
pl : I18n
pl =
    { beatenHighScore_ = "Pobiłeś mój rekord."
    , congratulations_ = "Gratulacje!"
    , gameHighScore_ = \score -> "Najlepszy wynik: " ++ score
    , gameOver_ = "Koniec gry"
    , gameScore_ = \score -> "Wynik: " ++ score
    , newHighScore_ = \score -> "Nowy rekord! " ++ score
    , playAgainBtn_ = "Jeszcze raz?"
    , thanksForPlaying_ = "Dzięki za grę!"
    , viewSource_ = "Zobacz kod źródłowy ↗"
    }


{-| Enumeration of the supported languages
-}
type Language
    = En
    | Pl


{-| A list containing all `Language`s. The list is sorted alphabetically.
-}
languages : List Language
languages =
    [ En, Pl ]


{-| Convert a `Language` to its `String` representation.
-}
languageToString : Language -> String
languageToString lang =
    case lang of
        En ->
            "en"

        Pl ->
            "pl"


{-| Maybe parse a `Language` from a `String`.
This will map languages based on the prefix i.e. 'en-US' and 'en' will both map to 'En' unless you provided a 'en-US' translation file.
-}
languageFromString : String -> Maybe Language
languageFromString lang =
    let
        helper langs =
            case langs of
                [] ->
                    Maybe.Nothing

                l :: ls ->
                    if String.startsWith (languageToString l) lang then
                        Maybe.Just l

                    else
                        helper ls
    in
    helper (List.reverse languages)
